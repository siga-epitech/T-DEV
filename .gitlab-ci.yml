stages:
  - install
  - build
  - test
  - deploy

# Variables globales
variables:
  NODE_ENV: 'production'
  DOCKER_HOST: "tcp://docker:2375/"
  DOCKER_TLS_CERTDIR: ""
  TEAMS_WEBHOOK_URL: "https://epitechfr.webhook.office.com/webhookb2/0847c46d-a93b-4c0b-a417-a1c4b63b47c0@901cb4ca-b862-4029-9306-e5cd0f6d9f86/IncomingWebhook/f569423dffab438cbebff4778201e9e2/4b235b50-7405-4659-9db9-ce370427f74f/V2kmSd8pAHLBLSJNpN8F9c6YNrLCnOXkvyiziU3ezVi0w1"

# Utilisation des runners Docker
default:
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache npm
    - npm install -g npm@latest

# Ã‰tape d'installation des dÃ©pendances pour le frontend
install_frontend:
  stage: install
  script:
    - echo "Installing frontend dependencies"
    - cd trinity
    - npm install
    - echo "Forcing failure to test Teams notification"
    - exit 1
    - echo "Frontend dependencies installed"
  artifacts:
    paths:
      - trinity/node_modules
  only:
    - feature/docker-configuration-siga
    - main
    - dev
  after_script:
    - |
      if [ "$CI_JOB_STATUS" != "success" ]; then
        curl -H "Content-Type: application/json" \
        -d "{\"text\": \"ðŸš¨ Pipeline Failed on job: install_frontend for project $CI_PROJECT_NAME (branch: $CI_COMMIT_REF_NAME)\"}" \
        $TEAMS_WEBHOOK_URL
      fi

# Ã‰tape d'installation des dÃ©pendances pour le backend
install_backend:
  stage: install
  script:
    - echo "Installing backend dependencies"
    - cd app
    - npm install
    - echo "Backend dependencies installed"
  artifacts:
    paths:
      - app/node_modules
  only:
    - feature/docker-configuration-siga
    - main
    - dev
  after_script:
    - |
      if [ "$CI_JOB_STATUS" != "success" ]; then
        curl -H "Content-Type: application/json" \
        -d "{\"text\": \"ðŸš¨ Pipeline Failed on job: install_backend for project $CI_PROJECT_NAME (branch: $CI_COMMIT_REF_NAME)\"}" \
        $TEAMS_WEBHOOK_URL
      fi

# Ã‰tape de build du frontend
build_frontend:
  stage: build
  script:
    - echo "Building frontend"
    - cd trinity
    - npm run build
    - echo "Frontend built successfully"
  artifacts:
    paths:
      - trinity/build
  only:
    - feature/docker-configuration-siga
    - main
    - dev
  after_script:
    - |
      if [ "$CI_JOB_STATUS" != "success" ]; then
        curl -H "Content-Type: application/json" \
        -d "{\"text\": \"ðŸš¨ Pipeline Failed on job: build_frontend for project $CI_PROJECT_NAME (branch: $CI_COMMIT_REF_NAME)\"}" \
        $TEAMS_WEBHOOK_URL
      fi

# Ã‰tape de tests pour le frontend
test_frontend:
  stage: test
  script:
    - echo "Running frontend tests"
    - cd trinity
    - npm test
    - echo "Frontend tests completed"
  only:
    - main
    - dev
  after_script:
    - |
      if [ "$CI_JOB_STATUS" != "success" ]; then
        curl -H "Content-Type: application/json" \
        -d "{\"text\": \"ðŸš¨ Pipeline Failed on job: test_frontend for project $CI_PROJECT_NAME (branch: $CI_COMMIT_REF_NAME)\"}" \
        $TEAMS_WEBHOOK_URL
      fi

# Ã‰tape de tests pour le backend
test_backend:
  stage: test
  script:
    - echo "Running backend tests"
    - cd app
    - npm test
    - echo "Backend tests completed"
  only:
    - feature/docker-configuration-siga
    - main
    - dev
  after_script:
    - |
      if [ "$CI_JOB_STATUS" != "success" ]; then
        curl -H "Content-Type: application/json" \
        -d "{\"text\": \"ðŸš¨ Pipeline Failed on job: test_backend for project $CI_PROJECT_NAME (branch: $CI_COMMIT_REF_NAME)\"}" \
        $TEAMS_WEBHOOK_URL
      fi

# Ã‰tape de dÃ©ploiement pour l'environnement de dÃ©veloppement
deploy_dev:
  stage: deploy
  script:
    - echo "DÃ©ploiement sur l'environnement de dÃ©veloppement"
    - docker-compose -f ./docker-compose.dev.yml up --build -d
  only:
    - feature/docker-configuration-siga
    - dev
  after_script:
    - |
      if [ "$CI_JOB_STATUS" != "success" ]; then
        curl -H "Content-Type: application/json" \
        -d "{\"text\": \"ðŸš¨ Pipeline Failed on job: deploy_dev for project $CI_PROJECT_NAME (branch: $CI_COMMIT_REF_NAME)\"}" \
        $TEAMS_WEBHOOK_URL
      fi

# Ã‰tape de dÃ©ploiement pour l'environnement de production
deploy_prod:
  stage: deploy
  script:
    - echo "DÃ©ploiement sur l'environnement de production"
    - docker-compose -f ./docker-compose.prod.yml up --build -d
  only:
    - feature/docker-configuration-siga
    - main
  when: manual  # Optionnel, pour le dÃ©ploiement manuel en production
  after_script:
    - |
      if [ "$CI_JOB_STATUS" != "success" ]; then
        curl -H "Content-Type: application/json" \
        -d "{\"text\": \"ðŸš¨ Pipeline Failed on job: deploy_prod for project $CI_PROJECT_NAME (branch: $CI_COMMIT_REF_NAME)\"}" \
        $TEAMS_WEBHOOK_URL
      fi
